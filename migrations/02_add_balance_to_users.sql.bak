-- src/server/db/migrations/02_add_balance_to_users.sql
ALTER TABLE users ADD COLUMN IF NOT EXISTS balance DECIMAL(10,2) DEFAULT 0;

-- Create an index on the balance column for faster queries
CREATE INDEX IF NOT EXISTS idx_users_balance ON users(balance);

-- Add check constraint to ensure balance is never negative
ALTER TABLE users ADD CONSTRAINT check_positive_balance CHECK (balance >= 0);

-- Add a table for transaction history
CREATE TABLE IF NOT EXISTS fund_transactions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  amount DECIMAL(10,2) NOT NULL,
  type VARCHAR(20) NOT NULL CHECK (type IN ('deposit', 'withdrawal', 'transfer', 'winnings', 'bet')),
  description TEXT,
  reference_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  game_id INTEGER REFERENCES games(id) ON DELETE SET NULL
);

-- Create indexes for transaction queries
CREATE INDEX IF NOT EXISTS idx_fund_transactions_user_id ON fund_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_fund_transactions_type ON fund_transactions(type);
CREATE INDEX IF NOT EXISTS idx_fund_transactions_created_at ON fund_transactions(created_at);

-- Add a trigger to log all balance changes
CREATE OR REPLACE FUNCTION log_balance_change()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.balance != OLD.balance THEN
    INSERT INTO fund_transactions (user_id, amount, type, description)
    VALUES (NEW.id, NEW.balance - OLD.balance, 'auto', 'Balance changed from ' || OLD.balance || ' to ' || NEW.balance);
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger
CREATE TRIGGER balance_change_trigger
AFTER UPDATE OF balance ON users
FOR EACH ROW
EXECUTE FUNCTION log_balance_change();